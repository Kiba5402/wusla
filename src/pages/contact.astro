---
import Layout from '~/layouts/PageLayout.astro';
import HeroText from '~/components/widgets/HeroText.astro';
import ContactUs from '~/components/widgets/Contact.astro';
import { Icon } from 'astro-icon/components';

const metadata = {
  title: 'Contáctanos',
};
---

<Layout metadata={metadata}>
  <!-- Pantalla de carga (se oculta por defecto) -->
  <div id="loading-overlay" class="loading-overlay hidden">
    <div class="flex hidden" id="loading">
      <span>Enviando</span>
      <svg class="animate-spin mr-3 h-5 w-5 text-white mx-1" viewBox="0 0 24 24">
        <circle class="opacity-0" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path
          class=""
          fill="#6d28d9"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>
    </div>
    <div class="flex hidden" id="loaded">
      <span>Enviado</span>
      <Icon name="tabler:check" class="w-6 h-6 inline-block -mt-0.5" />
    </div>
  </div>

  <!-- HeroText Widget ******************* -->

  <HeroText tagline="Contacto" title="¡Conectémonos!" />
  <ContactUs
    id="form"
    formId="contacUsForm"
    title="¡Envíanos un mensaje!"
    subtitle="Nuestro equipo de soporte estará encantado de ayudarle."
    inputs={[
      {
        type: 'text',
        name: 'name',
        label: 'Nombre',
      },
      {
        type: 'email',
        name: 'email',
        label: 'Correo',
      },
      {
        type: 'number',
        name: 'phone',
        label: 'Teléfono',
      },
    ]}
    textarea={{
      label: 'Message',
    }}
    disclaimer={{
      label:
        'Al enviar este formulario de contacto, usted reconoce y acepta la recopilación de su información personal.',
    }}
    description="Nuestro equipo de soporte normalmente responde dentro de las 24 horas hábiles."
  />
</Layout>

<style>
  /* Estilos para la pantalla de carga */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 1;
    transition: opacity 2s ease; /* Transición para el efecto fade */
  }

  .hidden {
    opacity: 0; /* Oculto cuando se agrega la clase .hidden */
    pointer-events: none; /* Evita la interacción mientras está oculto */
  }
</style>

<script type="module">
  const form = document.getElementById('contacUsForm');
  // event listeners
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    sendmail(formData, form);
  });

  const sendmail = async (formData, form) => {
    showLoading();
    const data = await fetch('./api/sendmail.json', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(Object.fromEntries(formData)),
    })
      .then((res) => {
        hideLoading();
        form.reset();
        if (!res.ok) {
          throw new Error(res.status);
        }
        return res.json();
      })
      .catch((err) => {
        hideLoading();
        console.log('Error', err);
        throw new Error('Network error.');
      });
  };

  function showLoading() {
    const overlay = document.getElementById('loading-overlay');
    overlay.classList.remove('hidden');
    const overlaLoading = document.getElementById('loading');
    overlaLoading.classList.remove('hidden');
    overlay.style.display = 'flex'; // Asegurarse de que el overlay sea visible
  }

  function hideLoading() {
    const overlaLoading = document.getElementById('loading');
    overlaLoading.classList.add('hidden');

    const overlayLoaded = document.getElementById('loaded');
    overlayLoaded.classList.remove('hidden');

    const overlay = document.getElementById('loading-overlay');
    overlay.classList.add('hidden');

    setTimeout(() => {
      overlayLoaded.classList.add('hidden');
      overlay.style.display = 'none'; // Ocultar el overlay después de la transición
    }, 2000); // Debe coincidir con la duración de la transición en CSS
  }
</script>